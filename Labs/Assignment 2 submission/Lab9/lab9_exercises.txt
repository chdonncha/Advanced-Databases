EXERCISE 1

- create mary and bill and establish required relationships

CREATE (e17:Person { name: "Tom", country: "Spain", age: 28, sport: "Football" }),
(e18:Person { name: "Bill", country: "Ireland", age: 23})

MATCH (e1:Person {name: "Tom"}), (e2:Person {name: "Mary"})
CREATE (e1)-[:FRIEND_OF]->(e2)

MATCH (e1:Person {name: "Bill"}), (e2:Person {name: "Mary"})
CREATE (e1)-[:FRIEND_OF]->(e2)

MATCH (e1:Person {name: "Bill"}), (e2:Person {name: "Denis"})
CREATE (e1)-[:FRIEND_OF]->(e2)


- Show the age of Denis and his friends

MATCH (e1:Person {name: "Denis"}) - [:FRIEND_OF] - (e2) 
RETURN e2, e1.age as denisAge


- Show all the person from Scotland

MATCH (e:Person {country: "Scotland"}) 
RETURN e


- Show all the person with age less or equal than 20 from Ireland

MATCH (e:Person {country: "Ireland"}) 
WHERE e.age <= 20 
RETURN e


- Show all the person with age less or equal 30 playing football 

MATCH (e:Person {sport: "Football"}) 
WHERE e.age <= 30 
RETURN e


- Count the person by country

MATCH (e1)
RETURN e1.country, COUNT(e1.country) as total


- Show the average age of the person group by sport

MATCH (e1)
RETURN e1.sport, AVG(e1.age) as averageAge


- Show all the direct friends of Mary

MATCH (e1:Person {name: "Mary"}) - [:FRIEND_OF] -> (e2) 
RETURN e1, e2


- Show all the friends of Paul with a maximum distance of 5 steps

MATCH (e1:Person {name: "Paul"}) - [:FRIEND_OF*..5] -> (e2) 
RETURN e1, e2


- Count all the friends of Paul with maximum distance 5 steps by nationality

MATCH (e1:Person {name: "Paul"}) - [:FRIEND_OF*..5] -> (e2:Person) 
RETURN e2.country, COUNT(DISTINCT e2) as nationalityNumber


- Show the path(s) between Paul and Lisa. For each path show the length. How many paths are there?

MATCH
path = (e1:Person {name: "Paul" }) - [:FRIEND_OF*..5] -> (m:Person {name:"Lisa"})
RETURN path,
REDUCE (tot = 0, n IN relationships(path) | tot + length(path))  as path_length


- Show the shortest path between Paul and Lisa.

MATCH
path = shortestPath ((e:Person {name: "Paul"}) - [:FRIEND_OF] -> (m:Person {name: "Lisa"}))
RETURN path

- Show (if exists) a connection between Mary and all her friends, where the path can only contain persons that play football

MATCH
path = shortestPath ((e1:Person {name: "Mary" }) - [:FRIEND_OF] -> (e2:Person {sport:"Football"}))
RETURN path


EXERCISE 2

- create the airport schema based on the given information

CREATE
(e1:Airport { city: "dublin", country: "ireland", code: "dub" }),
(e2:Airport { city: "cork", country: "ireland", code: "ork" }),
(e3:Airport { city: "london", country: "uk", code: "lhr" }),
(e4:Airport { city: "rome", country: "italy", code: "fco" }), 
(e5:Airport { city: "moscow", country: "russia", code: "dme" }), 
(e6:Airport { city: "hongkong", country: "china", code: "hkg" }),
(e7:Airport { city: "amsterdam", country: "holland", code: "ams" }), 
(e8:Airport { city: "berlin", country: "germany", code: "txl" }),
(e9:Airport { city: "paris", country: "france", code: "cdg" }),
(e10:Airport { city: "newyork", country: "usa", code: "jfk" }),
(e11:Airport { city: "chicago", country: "usa", code: "ord" }),
(e12:Airport { city: "sao_paulo", country: "brazil", code: "gru" }), 
(e13:Airport { city: "rio", country: "brazil", code: "gig" }),

(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e1)-[:CONNECTED_TO {time: 45, price: 150} ]->(e3),

(e4)-[:CONNECTED_TO {time: 150, price: 400} ]->(e3),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e4),

(e4)-[:CONNECTED_TO {time: 120, price: 500} ]->(e9),
(e9)-[:CONNECTED_TO {time: 45, price: 150} ]->(e4),

(e9)-[:CONNECTED_TO {time: 60, price: 200} ]->(e1),
(e1)-[:CONNECTED_TO {time: 45, price: 150} ]->(e9),

(e8)-[:CONNECTED_TO {time: 240, price: 900} ]->(e5),
(e5)-[:CONNECTED_TO {time: 45, price: 150} ]->(e8),

(e9)-[:CONNECTED_TO {time: 30, price: 100} ]->(e7),
(e7)-[:CONNECTED_TO {time: 45, price: 150} ]->(e9),

(e8)-[:CONNECTED_TO {time: 120, price: 900} ]->(e1),
(e1)-[:CONNECTED_TO {time: 45, price: 150} ]->(e8),

(e3)-[:CONNECTED_TO {time: 700, price: 1100} ]->(e10),
(e10)-[:CONNECTED_TO {time: 45, price: 150} ]->(e3),

(e1)-[:CONNECTED_TO {time: 360, price: 800} ]->(e10),
(e10)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e1)-[:CONNECTED_TO {time: 50, price: 50} ]->(e2),
(e2)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e1)-[:CONNECTED_TO {time: 150, price: 70} ]->(e4),
(e4)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e1)-[:CONNECTED_TO {time: 480, price: 890} ]->(e11),
(e11)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e7)-[:CONNECTED_TO {time: 660, price: 750} ]->(e6),
(e6)-[:CONNECTED_TO {time: 45, price: 150} ]->(e7),

(e3)-[:CONNECTED_TO {time: 700, price: 1000} ]->(e6),
(e6)-[:CONNECTED_TO {time: 45, price: 150} ]->(e3),

(e1)-[:CONNECTED_TO {time: 90, price: 60} ]->(e7),
(e7)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e5)-[:CONNECTED_TO {time: 720, price: 1000} ]->(e10),
(e10)-[:CONNECTED_TO {time: 45, price: 150} ]->(e5),

(e5)-[:CONNECTED_TO {time: 420, price: 500} ]->(e6),
(e6)-[:CONNECTED_TO {time: 45, price: 150} ]->(e5),

(e10)-[:CONNECTED_TO {time: 240, price: 430} ]->(e11),
(e11)-[:CONNECTED_TO {time: 45, price: 150} ]->(e10),

(e1)-[:CONNECTED_TO {time: 900, price: 800} ]->(e12),
(e12)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),

(e12)-[:CONNECTED_TO {time: 840, price: 650} ]->(e10),
(e10)-[:CONNECTED_TO {time: 45, price: 150} ]->(e12),

(e13)-[:CONNECTED_TO {time: 1200, price: 1100} ]->(e8),
(e8)-[:CONNECTED_TO {time: 45, price: 150} ]->(e13)


- Find the total time from Moscow to Rio. Show also the path (airport connections) ** NEEDS WORK **

MATCH
path = shortestPath ((e1:Airport {city: "moscow" }) - [c:CONNECTED_TO*] - (e2:Airport {city:"rio"}))
RETURN path, REDUCE (tot_price = 0, connect IN relationships(path) | tot_price + connect.time ) as total_price


- Show all the flights from Dublin to any destination and sort them by price (from the most expensive)

MATCH (e1:Airport {city: "dublin"}) - [c:CONNECTED_TO] - (e2:Airport) 
WITH e1, e2, collect(c) AS con
ORDER BY REDUCE (sort_price = 0, connect IN con | sort_price + connect.price ) DESC
RETURN e1, e2, REDUCE (tot_price = 0, connect IN con | tot_price + connect.price ) as total_price


- Show what can be reached from Chicago in one or two steps (= direct flight or 1 change only)

MATCH (e1:Airport {city: "chicago"}) - [:CONNECTED_TO*1..2] - (e2:Airport) 
RETURN e1, e2


- Show what can be reached from London in less than 240 minutes (4 hours)

MATCH (e1:Airport {city: "dublin"}) - [c:CONNECTED_TO] - (e2:Airport) 
WITH e1, e2, collect(c) AS con
WHERE REDUCE (sort_price = 0, connect IN con | sort_price + connect.time ) < 240 
RETURN e1, e2, REDUCE (tot_price = 0, connect IN con | tot_price + connect.time ) as total_price



To delete the graphs
 
MATCH (a:Person) OPTIONAL MATCH (a)-[r1]-(), (m)-[r2]-() DELETE a,r1,m,r2
 
MATCH (a:Airport) OPTIONAL MATCH (a)-[r1]-(), (m)-[r2]-() DELETE a,r1,m,r2


