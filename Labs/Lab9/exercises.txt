EXERCISE 1

CREATE (e17:Person { name: "Tom", country: "Spain", age: 28, sport: "Football" }),
(e18:Person { name: "Bill", country: "Ireland", age: 23});

(e17)-[:FRIEND_OF]->(e3),
(e18)-[:FRIEND_OF]->(e3), (e18)-[:FRIEND_OF]->(e16),


- Show the age of Denis and his friends **COMPLETE**

MATCH (e1:Person {name: "Denis"}) - [:FRIEND_OF] - (e2) 
RETURN e2, e1.age as denisAge


- Show all the person from Scotland **COMPLETE**

MATCH (e:Person {country: "Scotland"}) 
RETURN e


- Show all the person with age less or equal than 20 from Ireland **COMPLETE**

MATCH (e:Person {country: "Ireland"}) 
WHERE e.age <= 20 
RETURN e


- Show all the person with age less or equal 30 playing football **COMPLETE**

MATCH (e:Person {sport: "Football"}) 
WHERE e.age <= 30 
RETURN e


- Count the person by country **COMPLETE**

MATCH (e1)
RETURN e1.country, COUNT(e1.country) as total


- Show the average age of the person group by sport **COMPLETE**

MATCH (e1)
RETURN e1.sport, AVG(e1.age) as averageAge


- Show all the direct friends of Mary **COMPLETE ???? ***

MATCH (e1:Person {name: "Mary"}) - [:FRIEND_OF] - (e2) 
RETURN e1, e2


- Show all the friends of Paul with a maximum distance of 5 steps **COMPLETE**

MATCH (e1:Person {name: "Paul"}) - [:FRIEND_OF*..5] - (e2) 
RETURN e1, e2


- Count all the friends of Paul with maximum distance 5 steps by nationality **COMPLETE BUT IS THAT NUMBER MEANT TO BE THAT HIGH???** 

MATCH (e1:Person {name: "Paul"}) - [:FRIEND_OF*..5] - (e2:Person) 
RETURN e2.country, COUNT(e2.country) as numfriends


- Show the path(s) between Paul and Lisa. For each path show the length. How many paths are there? **NOT COMPLETE** HOW TO COUNT ALL THE PATHS?

MATCH
path = (e1:Person {name: "Paul" }) - [:FRIEND_OF*..5] -> (m:Person {name:"Lisa"})
RETURN path, length(path), COUNT(path) as totalPaths

- Show the shortest path between Paul and Lisa. **COMPLETE**

MATCH
path = shortestPath ((e:Person {name: "Paul"}) - [:FRIEND_OF*..5] - (m:Person {name: "Lisa"}))
RETURN path

- Show (if exists) a connection between Mary and all her friends, where the path can only contain persons that play football **NOT COMPLETE**

MATCH
path = (e1:Person {name: "Paul" }) - [:FRIEND_OF*..5] -> (m:Person {name:"Lisa"})
RETURN path, length(path), COUNT(path) as totalPaths


EXERCISE 2


CREATE
(e1:Airport { city: "dublin", country: "ireland", code: "dub" }),
(e2:Airport { city: "cork", country: "ireland", code: "ork" }),
(e3:Airport { city: "london", country: "uk", code: "lhr" }),
(e4:Airport { city: "rome", country: "italy", code: "fco" }), 
(e5:Airport { city: "moscow", country: "russia", code: "dme" }), 
(e6:Airport { city: "hongkong", country: "china", code: "hkg" }),
(e7:Airport { city: "amsterdam", country: "holland", code: "ams" }), 
(e8:Airport { city: "berlin", country: "germany", code: "txl" }),
(e9:Airport { city: "paris", country: "france", code: "cdg" }),
(e10:Airport { city: "newyork", country: "usa", code: "jfk" }),
(e11:Airport { city: "chicago", country: "usa", code: "ord" }),
(e12:Airport { city: "sao_paulo", country: "brazil", code: "gru" }), 
(e13:Airport { city: "rio", country: "brazil", code: "gig" }),

(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1),
(e3)-[:CONNECTED_TO {time: 45, price: 150} ]->(e1)


(london,dublin,45,150) 
(rome,london,150,400) 
(rome,paris,120,500)  
(paris,dublin,60,200) 
(berlin,moscow,240,900) 
(paris,amsterdam,30,100) 
(berlin,dublin,120,900) 
(london,newyork,700,1100) 
(dublin,newyork,360,800) 
(dublin,cork,50,50) 
(dublin,rome,150,70) 
(dublin,chicago,480,890) 
(amsterdam,hongkong,660,750) 
(london,hongkong,700,1000) 
(dublin,amsterdam,90,60) 
(moscow,newyork,720,1000) 
(moscow,hongkong,420,500) 
(newyork,chicago,240,430) 
(dublin,sao_paulo,900,800) 
(sao_paulo,newyork,840,650) 
(rio,berlin,1200,1100) 

(e17)-[:FRIEND_OF]->(e3),